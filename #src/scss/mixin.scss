// подключение шрифтов с помощью gulp
@mixin font($fontName, $fileName, $weight, $style) {
   @font-face {
      font-family: $fontName;
      font-display: swap;
      src: url("../fonts/#{$fileName}.woff") format("woff"), url("../fonts/#{$fileName}.woff2") format("woff2");
      font-weight: #{$weight};
      font-style: #{$style};
   }
}

//Адаптивный шрифт
@mixin adaptiv-font($pcSize, $mobSize, $maxSize) {
   $addSize: $pcSize - $mobSize;
   @if $maxSize==1 {
      //Только если меньше контейнера
      font-size: $pcSize + px;
      @media (max-width: #{$maxWidthContainer + px}) {
         font-size: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
      }
   } @else if $maxSize==2 {
      //Только если больше контейнера
      font-size: $pcSize + px;
      @media (min-width: #{$maxWidthContainer + px}) {
         font-size: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
      }
   } @else {
      //Всегда
      font-size: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
   }
}

//Адаптивное свойство
@mixin adaptiv-value($property, $startSize, $minSize, $type) {
   $addSize: $startSize - $minSize;
   @if $type==1 {
      //Только если меньше контейнера
      #{$property}: $startSize + px;
      @media (max-width: #{$maxWidthContainer + px}) {
         #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
      }
   } @else if $type==2 {
      //Только если больше контейнера
      #{$property}: $startSize + px;
      @media (min-width: #{$maxWidthContainer + px}) {
         #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
      }
   } @else {
      //Всегда
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
   }
}

//triangle shape
@mixin triangle($width: 10, $height: 10, $angle: 0, $color: #000) {
   width: 0;
   height: 0;
   border-bottom: $height + px solid $color;
   border-right: $width / 2 + px solid transparent;
   border-left: $width / 2 + px solid transparent;
   transform: rotate($angle + deg);
}

//cross x
@mixin X($top: 0, $left: 0, $width: 10px, $thickness: 1px, $color: #000) {
   position: relative;
   &::before {
      content: "";
      position: absolute;
      top: $top;
      left: $left;
      display: block;
      width: calc(#{$width} * 1.414 - #{$thickness});
      height: $thickness;
      background-color: $color;
      transform: translate(-50%, -50%) rotate(45deg);
   }
   &::after {
      content: "";
      position: absolute;
      top: $top;
      left: $left;
      display: block;
      width: calc(#{$width} * 1.414 - #{$thickness});
      height: $thickness;
      background-color: $color;
      transform: translate(-50%, -50%) rotate(-45deg);
   }
}

//arrow V
@mixin V($top: 0, $left: 0, $angle: 0, $width: 20, $height: 10, $thickness: 1, $color: #000) {
   $norm: $thickness * max(1, 2 * $height / $width);
   $ratio: 2 * ($height - $thickness) / $width;
   $alfaRad: atan($ratio);
   $alfaDeg: rad-deg($alfaRad);
   $cosAlfa: cos($alfaRad);
   $angleRad: deg-rad($angle);
   $cosAngle: cos($angleRad);
   $outset: ($height / 2 * $cosAngle);

   &::before,
   &::after {
      content: "";
      position: absolute;
      top: $top;
      left: $left;
      display: block;
      height: $thickness + px;
      width: (($width / $cosAlfa) / 2) + px;
      background-color: $color;
      transition: all 0.3s ease 0s;
   }
   @if (abs($angle) == 180) {
      &::before {
         transform-origin: 100% 100%;
         transform: translate(-100%, $outset + px) rotate($alfaDeg + deg) rotate3d(0, 0, 1, -2 * $alfaDeg + deg) skewX(-$alfaDeg + deg);
      }
      &::after {
         transform-origin: 0 100%;
         transform: translate(0, $outset + px) rotate(-$alfaDeg + deg) rotate3d(0, 0, 1, 2 * $alfaDeg + deg) skewX($alfaDeg + deg);
      }
   } @else {
      &::before {
         transform-origin: 100% 100%;
         transform: translate(-100%, $outset - $thickness + px) rotate($alfaDeg + deg) rotate3d(0, 0, 1, $angle + deg) skewX($alfaDeg + deg);
      }
      &::after {
         transform-origin: 0 100%;
         transform: translate(0, $outset - $thickness + px) rotate(-$alfaDeg + deg) rotate3d(0, 0, 1, $angle + deg) skewX(-$alfaDeg + deg);
      }
   }
}

//transition animation
@mixin anim_cubic($time, $delay) {
   -webkit-transition: all $time cubic-bezier(0.68, -0.55, 0.265, 1.55) $delay;
   -moz-transition: all $time cubic-bezier(0.68, -0.55, 0.265, 1.55) $delay;
   -ms-transition: all $time cubic-bezier(0.68, -0.55, 0.265, 1.55) $delay;
   -o-transition: all $time cubic-bezier(0.68, -0.55, 0.265, 1.55) $delay;
   transition: all $time cubic-bezier(0.68, -0.55, 0.265, 1.55) $delay;
}
